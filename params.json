{"name":"JS.Class","tagline":"Javascript OOP library","body":"js.class [![Build Status](https://travis-ci.org/dkraczkowski/js.class.svg?branch=master)](https://travis-ci.org/dkraczkowski/js.class)\r\n========\r\n\r\njs.class is a library which focuses on simplifying OOP in javascript.\r\n\r\n###Features:\r\n - super fast!\r\n - small footprint, no dependency, 0.2K minimized\r\n - works on both browser and node.js\r\n - supports: inheritance, statics, constans, mixins\r\n - typeOf\r\n\r\nAPI\r\n=========================\r\n\r\n###Class declaration\r\n\r\n```js\r\nvar MyClass = Class({\r\n    myMethod: function() {} //your method declaration\r\n});\r\n```\r\n\r\n###Constructor pattern\r\n\r\n```js\r\nvar MyClass = Class({\r\n    create: function(param1, param2) {//this will be called with new keyword\r\n        this.param1 = param1;\r\n        this.param2 = param2;\r\n    }\r\n});\r\n\r\nvar instance = new MyClass(1,2);\r\nconsole.log(instance.param1);//1\r\nconsole.log(instance.param2);//2\r\n```\r\n\r\n###Inheritance\r\n```js\r\nvar MyChildClass = MyClass.extend({});\r\n```\r\n\r\n###Invoking overridden methods\r\n```js\r\nvar MyClass = Class({\r\n    myMethod: function() {};\r\n});\r\nvar MyChildClass = MyClass.extend({\r\n    myMethod: function() {\r\n        MyClass.prototype.myMethod.apply(this, arguments);\r\n    }\r\n});\r\n```\r\n\r\n###Statics and constans\r\n> Constans will not work in ie >=8 due to lack of Object.define property support\r\n\r\n\r\nStatic variables can be easy defined by usage of `static` function, which accepts literal object.\r\n\r\n```js\r\nvar StaticExample = Class({\r\n}).static({\r\n    myStatic: 'myStatic'\r\n});\r\nconsole.log(StaticExample.myStatic);//myStatic\r\nStaticExample.myStatic = 'otherValue';\r\nconsole.log(StaticExample.myStatic);//otherValue\r\n```\r\n\r\nIf literal object will contain a key in uppercase js-class will treat a variable as a constans:\r\n```js\r\nvar ConstantExample = Class({\r\n}).static({\r\n    MY_CONST: 'const'\r\n});\r\nconsole.log(ConstantExample.MY_CONST);//const\r\nConstantExample.MY_CONST = 'otherValue';\r\nconsole.log(ConstantExample.MY_CONST);//const\r\n```\r\n\r\n###Mixins\r\n\r\nMixin is a class which contains a combination of methods from other classes\r\nIts really usefull strategy if you are going to follow DRY methodology.\r\nTo define mixin we need to simply use `mixin` method:\r\n```js\r\nvar Pet = Class({\r\n    name: function(name) {\r\n        if (typeof name === 'undefined') {\r\n            return this.name;\r\n        }\r\n        this.name = name;\r\n    }\r\n});\r\nvar Animal = Class({\r\n    eat: function() {\r\n        this.fed = true;\r\n    },\r\n    drink: function() {\r\n        this.drunk = true;\r\n    }\r\n});\r\nvar Dog = Class({\r\n}).mixin(Pet, Animal);\r\nvar pluto = new Dog();\r\npluto.eat();\r\npluto.name('pluto');\r\n\r\nconsole.log(pluto.name());//pluto\r\nconsole.log(pluto.fed);//true\r\n```\r\n\r\n###typeOf\r\n\r\njs.class provides handy `typeOf` method in every instance of class,\r\nthe method allows you to determine whather object is a mixin of given class:\r\n\r\n```js\r\nvar pluto = new Dog();\r\n\r\nconsole.log(pluto.isA(Dog));//true\r\nconsole.log(pluto.isA(Animal));//true\r\nconsole.log(pluto.isA(Pet));//true\r\nconsole.log(pluto.isA(MyClass));//false\r\n```\r\n\r\nInstance of support\r\n===================\r\njs.class does support `instanceof` operator. Consider the following example:\r\n\r\n```js\r\nvar MyClass = Class({\r\n    create: function(param1, param2) {\r\n        this.param1 = param1;\r\n        this.param2 = param2;\r\n    }\r\n});\r\nvar MyChildClass = MyClass.extend({});\r\n\r\nvar t = new MyChildClass();\r\n\r\nconsole.log(t instanceof MyClass);//true\r\nconsole.log(t instanceof MyChildClass);//true\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}