{"name":"Js.class","tagline":"Javascript OOP library","body":"js.class\r\n========\r\n\r\njs.class is a library which focuses on simplifying OOP in javascript.\r\nFeatures:\r\n - easier inheritance model\r\n - isA operator\r\n - statics/constans\r\n - mixins\r\n\r\nExample class declaration\r\n=========================\r\nIn order to define new class, consider following example\r\n\r\n```js\r\nvar MyClass = Class({\r\n    myMethod: function() {} //your method declaration\r\n});\r\n```\r\n\r\nThis corresponds to:\r\n\r\n```js\r\nvar MyClass = function() {\r\n    //your constructor goes here\r\n};\r\nMyClass.prototype.myMethod = function() {\r\n};\r\n```\r\n\r\nConstructors\r\n============\r\n\r\nJs-class comes with build-in constructor pattern:\r\n\r\n```js\r\nvar MyClass = Class({\r\n    create: functon(param1, param2) {\r\n        this.param1 = param1;\r\n        this.param2 = param2;\r\n    }\r\n});\r\n```\r\nThis corresponds to:\r\n\r\n```js\r\nvar MyClass = function(param1, param2) {\r\n    this.param1 = param1;\r\n    this.param2 = param2;\r\n};\r\n```\r\n\r\n\r\nInheritance\r\n===========\r\n\r\nInheritance in js-class is a brief consider following examples:\r\n\r\n```js\r\nvar MyChildClass = MyClass.extend({});\r\n```\r\n\r\ncorresponds to\r\n\r\n```js\r\nvar MyChildClass = function(param1, param2) {\r\n    MyClass.apply(this, arguments);\r\n};\r\nMyChildClass.prototype = new MyClass();\r\n```\r\n\r\nStatic and constans\r\n===================\r\n> Constans will not work in ie >=8 due to lack of Object.define property support\r\n\r\n\r\nStatic variables can be easly defined by usage of `static` function, which accepts literal object.\r\n\r\n```js\r\nvar StaticExample = Class({\r\n}).static({\r\n    myStatic: 'myStatic'\r\n});\r\nconsole.log(StaticExample.myStatic);//myStatic\r\nStaticExample.myStatic = 'otherValue';\r\nconsole.log(StaticExample.myStatic);//otherValue\r\n```\r\n\r\nIf literal object will contain a key in uppercase js-class will treat a variable as a constans:\r\n```js\r\nvar StaticExample = Class({\r\n}).static({\r\n    MY_CONST: 'const'\r\n});\r\nconsole.log(StaticExample.MY_CONST);//const\r\nStaticExample.MY_CONST = 'otherValue';\r\nconsole.log(StaticExample.MY_CONST);//const\r\n```\r\n\r\nMixins\r\n======\r\nMixin is a class which contains a combination of methods from other classes\r\nIts really usefull strategy if you are going to follow DRY methodology.\r\nTo define mixin we need to simply use `mixin` method:\r\n```js\r\nvar Pet = Class({\r\n    name: function(name) {\r\n        if (typeof name === undefined) {\r\n            return this.name;\r\n        }\r\n        this.name = name;\r\n    }\r\n});\r\nvar Animal = Class({\r\n    eat: function() {\r\n        this.fed = true;\r\n    },\r\n    drink: function() {\r\n        this.drunk = true;\r\n    }\r\n});\r\nvar Dog = Class({\r\n}).mixin(Pet, Animal);\r\nvar pluto = new Dog();\r\npluto.eat();\r\npluto.name('pluto');\r\n\r\nconsole.log(pluto.name());//pluto\r\nconsole.log(pluto.fed);//true\r\n```\r\n\r\nisA\r\n===\r\n\r\njs-class provides handy isA method, which tells you whater class is an instance or mixin of passed class.\r\n```js\r\nvar pluto = new Dog();\r\n\r\nconsole.log(pluto.isA(Dog));//true\r\nconsole.log(pluto.isA(Animal));//true\r\nconsole.log(pluto.isA(Pet));//true\r\nconsole.log(pluto.isA(MyClass));//false\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}