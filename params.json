{"name":"JS.Class","tagline":"Javascript Class OOP library","body":"js.class [![Build Status](https://travis-ci.org/dkraczkowski/js.class.svg?branch=master)](https://travis-ci.org/dkraczkowski/js.class)\r\n========\r\n\r\njs.class is a library which focuses on simplifying OOP in javascript. JSClass performs with great speed if you compare it to other libraries like: `klass`, `ee-class` or even `Class`.\r\n\r\n\r\n###Features:\r\n - super fast!\r\n - small footprint, no dependency, 0.2K minimized\r\n - works on both browser and node.js\r\n - supports: inheritance, statics, constans, mixins\r\n - typeOf\r\n - build in singleton support\r\n\r\nAPI\r\n=========================\r\n\r\n###Usage\r\n####Node.js\r\n```\r\nvar Class = require('js.class');\r\nvar MyClass = Class({\r\n    myMethod: function() {} //your method declaration\r\n});\r\n```\r\n####Browser\r\n#####Normal version\r\n```html\r\n<script type=\"text/javascript\" src=\"dist/browser/class.min.js\"></script>\r\n<script>\r\nvar MyClass = Class({\r\n    myMethod: function() {} //your method declaration\r\n});\r\n</script>\r\n```\r\n#####No conflict version:\r\n```html\r\n<script type=\"text/javascript\" src=\"dist/browser/js.class-noconflict.js\"></script>\r\n<script>\r\nvar MyClass = JSClass({\r\n    myMethod: function() {} //your method declaration\r\n});\r\n</script>\r\n```\r\n\r\n###Class declaration\r\n\r\n```js\r\nvar MyClass = Class({\r\n    myMethod: function() {} //your method declaration\r\n});\r\n```\r\n\r\n###Constructor pattern\r\n\r\n```js\r\nvar MyClass = Class({\r\n    create: function(param1, param2) {//this will be called with new keyword\r\n        this.param1 = param1;\r\n        this.param2 = param2;\r\n    }\r\n});\r\n\r\nvar instance = new MyClass(1,2);\r\nconsole.log(instance.param1);//1\r\nconsole.log(instance.param2);//2\r\n```\r\n\r\n###Getters/Setters\r\n```js\r\nvar MyClass = Class({\r\n    create: function(param1, param2) {//this will be called with new keyword\r\n        this.param1 = param1;\r\n        this.param2 = param2;\r\n    },\r\n    get: {\r\n        allParams = function() {\r\n            return [param1, param2];\r\n        },\r\n        evenParams = function() {\r\n            return [param1];\r\n        },\r\n        oddParams = function() {\r\n            return [param2];\r\n        }\r\n    },\r\n    set: {\r\n        allParams: function(value) {\r\n            this.param1 = value[0];\r\n            this.param2 = value[1];\r\n        }\r\n    }\r\n});\r\nvar instance = new MyClass(1,2);\r\nconsole.log(instance.allParams);//[1,2]\r\nconsole.log(instance.oddParams);//[2]\r\n\r\ninstance.allParams = [3,4];\r\nconsole.log(instance.allParams);//[3,4]\r\n```\r\n\r\n_Check tests for more examples_\r\n\r\n###Inheritance\r\n```js\r\nvar MyChildClass = MyClass.extend({});\r\n```\r\n\r\n###Invoking overridden methods\r\n```js\r\nvar MyClass = Class({\r\n    myMethod: function() {};\r\n});\r\nvar MyChildClass = MyClass.extend({\r\n    myMethod: function() {\r\n        MyClass.prototype.myMethod.apply(this, arguments);\r\n    }\r\n});\r\n```\r\n\r\n###Statics and constans\r\n> Constans will not work in ie >=8 due to lack of Object.define property support\r\n\r\n\r\nStatic variables can be easy defined by usage of `static` function, which accepts literal object.\r\n\r\n```js\r\nvar StaticExample = Class({\r\n}).static({\r\n    myStatic: 'myStatic'\r\n});\r\nconsole.log(StaticExample.myStatic);//myStatic\r\nStaticExample.myStatic = 'otherValue';\r\nconsole.log(StaticExample.myStatic);//otherValue\r\n```\r\n\r\nIf literal object will contain a key in uppercase js-class will treat a variable as a constans:\r\n```js\r\nvar ConstantExample = Class({\r\n}).static({\r\n    MY_CONST: 'const'\r\n});\r\nconsole.log(ConstantExample.MY_CONST);//const\r\nConstantExample.MY_CONST = 'otherValue';\r\nconsole.log(ConstantExample.MY_CONST);//const\r\n```\r\n\r\n###Mixins\r\n\r\nMixin is a class which contains a combination of methods from other classes\r\nIts really usefull strategy if you are going to follow DRY methodology.\r\nTo define mixin we need to simply use `mixin` method:\r\n```js\r\nvar Pet = Class({\r\n    name: function(name) {\r\n        if (typeof name === 'undefined') {\r\n            return this.name;\r\n        }\r\n        this.name = name;\r\n    }\r\n});\r\nvar Animal = Class({\r\n    eat: function() {\r\n        this.fed = true;\r\n    },\r\n    drink: function() {\r\n        this.drunk = true;\r\n    }\r\n});\r\nvar Dog = Class({\r\n}).mixin(Pet, Animal);\r\nvar pluto = new Dog();\r\npluto.eat();\r\npluto.name('pluto');\r\n\r\nconsole.log(pluto.name());//pluto\r\nconsole.log(pluto.fed);//true\r\n```\r\n###Singleton\r\nIn order to create singleton class set `singleton` property to true, eg.:\r\n```js\r\nvar Singleton = Class({\r\n    singleton: true,\r\n    doA: function() {\r\n        return 'a';\r\n    }\r\n});\r\n\r\nvar p1 = Singleton.instance();\r\nvar p2 = Singleton.instance();\r\n\r\np1 === p2;//true\r\n\r\nnew Singleton();//will throw an Error\r\n```\r\n\r\n###typeOf\r\n\r\njs.class provides handy `typeOf` method in every instance of class,\r\nthe method allows you to determine whather object is a mixin of given class:\r\n\r\n```js\r\nvar pluto = new Dog();\r\n\r\nconsole.log(pluto.typeOf(Dog));//true\r\nconsole.log(pluto.typeOf(Animal));//true\r\nconsole.log(pluto.typeOf(Pet));//true\r\nconsole.log(pluto.typeOf(MyClass));//false\r\n```\r\n\r\nInstance of support\r\n===================\r\njs.class does support `instanceof` operator. Consider the following example:\r\n\r\n```js\r\nvar MyClass = Class({\r\n    create: function(param1, param2) {\r\n        this.param1 = param1;\r\n        this.param2 = param2;\r\n    }\r\n});\r\nvar MyChildClass = MyClass.extend({});\r\n\r\nvar t = new MyChildClass();\r\n\r\nconsole.log(t instanceof MyClass);//true\r\nconsole.log(t instanceof MyChildClass);//true\r\n```\r\n\r\nFor Developers\r\n==============\r\n###Running tests\r\n```\r\nnpm install\r\nnpm test\r\n```\r\n###Running benchmarks\r\n```\r\nnode ./benchmark/class-declaration.js\r\nnode ./benchmark/class-extend.js\r\nnode ./benchmark/class-mixins.js\r\n```\r\n\r\n####Class declaration benchs\r\n```\r\nnode ./benchmark/class-declaration.js\r\n\r\nclass x 75,624 ops/sec ±3.23% (86 runs sampled)\r\njs.class x 50,721 ops/sec ±9.67% (63 runs sampled)\r\nklass x 44,743 ops/sec ±8.60% (74 runs sampled)\r\nee-class x 25,366 ops/sec ±6.20% (77 runs sampled)\r\n```\r\n\r\n####Class extension benchs\r\n```\r\nnode ./benchmark/class-extend.js\r\n\r\njs.class x 126,312 ops/sec ±3.57% (92 runs sampled)\r\nclass x 78,576 ops/sec ±5.05% (85 runs sampled)\r\nklass x 59,602 ops/sec ±7.94% (76 runs sampled)\r\nee-class x 37,730 ops/sec ±4.70% (85 runs sampled)\r\n```\r\n\r\n####Mixins benchs\r\n```\r\nnode ./benchmark/class-mixins.js\r\n\r\njs.class x 677,574 ops/sec ±5.74% (86 runs sampled)\r\nclass x 541,828 ops/sec ±2.33% (93 runs sampled)\r\nklass x 210,674 ops/sec ±6.61% (83 runs sampled)\r\nee-class x 140,770 ops/sec ±1.89% (96 runs sampled)\r\n```\r\n| Note that only js.class supports `typeof` method, which allows you to determine whether given object is a mixin of other object/class.\r\n\r\n####Conclusion\r\nYou may notice simple class declaration is the fastest in `class` library, but when it comes to more\r\nadvanced oop features `js.class` is a good choice.\r\n\r\nVersion History\r\n===============\r\n### 2.5.0\r\nAdded setters/getters support\r\n### 2.4.1\r\nSingleton object cannot be extended\r\n### 2.4.0\r\nAdded singleton support\r\n### 2.2.6\r\nMixin method accepts objects as well\r\n### 2.2.5\r\nAdded benchmarks for libraries `class`, `klass`, `ee-class`\r\n### 2.2.1\r\nFixed instance's statics. Now if you change instance's static it will be changed across all other instances of the same class\r\n### 2.2.0\r\nRemoved behaviour which was copying consts/statics into children class","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}